# SPDX-License-Identifier: GPL-2.0-or-later

# STMicroelectronics STM32MP25x
# STM32MP25x devices support both JTAG and SWD transports.

# HLA does not support multi-cores nor custom CSW nor AP other than 0
if { [using_hla] } {
	echo "ERROR: HLA transport cannot work with this target."
	shutdown
}

source [find target/swj-dp.tcl]
source [find mem_helper.tcl]

if { [info exists CHIPNAME] } {
	set _CHIPNAME $CHIPNAME
} else {
	set _CHIPNAME stm32mp25x
}

set _ENDIAN little

# jtag scan chain
if { [info exists CPUTAPID] } {
	set _CPUTAPID $CPUTAPID
} else {
	if { [using_jtag] } {
		set _CPUTAPID 0x6ba00477
	} {
		set _CPUTAPID 0x6ba02477
	}
}

# Chip Level TAP Controller, only in jtag mode
if { [info exists CLCTAPID] } {
	set _CLCTAPID $CLCTAPID
} else {
	set _CLCTAPID 0x16505041
}

# For CubeIDE, in one debug sessio only one core is debugged
set _AP_NUM_A35 0
set _AP_NUM_M33 8
set _AP_NUM_M0P 2
if { [info exists AP_NUM] } {
    set _AP_NUM $AP_NUM
} else {
    set _AP_NUM $_AP_NUM_A35
}

# set GDB_PORT
if { [info exists GDB_PORT] } {
    set _GDB_PORT $GDB_PORT
} else {
    set _GDB_PORT 3333
}

# MP2 device have 2 Cortex-A35 on AP 0, by default debug the A35_0
# TODO validate _CORE_ID
if { [info exists CORE_ID] } {
    set _CORE_ID $CORE_ID
} else {
    set _CORE_ID 0
}

# Swicth mode from Aarch64/ARM64, Aarch32/ARM32 to Aarch64/Thumb
if { [info exists A35_MODE_SWITCH ] } {
    set _A35_MODE_SWITCH $A35_MODE_SWITCH
} else {
    set _A35_MODE_SWITCH yes
}

# A35 Secure mode
if { [info exists A35_SECURE] } {
    set _A35_SECURE $A35_SECURE
} else {
    set _A35_SECURE yes
}

# Manage RIF Memory Configuration
if { [info exists INIT_MEMCONFIG_OPENOCD] } {
    set _INIT_MEMCONFIG_OPENOCD $INIT_MEMCONFIG_OPENOCD
} else {
    set _INIT_MEMCONFIG_OPENOCD yes
}

# M33 TD-CID flag
if { [info exists M33_TDCID_FLAG] } {
    set _M33_TDCID_FLAG $M33_TDCID_FLAG
} else {
    set _M33_TDCID_FLAG [expr { $_AP_NUM == $_AP_NUM_M33 }]
}

# M33 secure
if { [info exists M33_SECURE] } {
    set _M33_SECURE $M33_SECURE
} else {
    set _M33_SECURE no
}

# HSI Frequency (used to patch EL3_Launcher to allow it to set STGEN to correct frequency)
if { [info exists HSI_FREQ] } {
    set _HSI_FREQ $HSI_FREQ
} else {
    # Default is 32MHz (for FPGA) # FIXME
    set _HSI_FREQ 32000000
}

# A35_0 secure
if { [info exists A35_0_SECURE] } {
    set _A35_0_SECURE $A35_0_SECURE
} else {
    set _A35_0_SECURE yes
}

# A35_1 secure
if { [info exists A35_1_SECURE] } {
    set _A35_1_SECURE $A35_1_SECURE
} else {
    set _A35_1_SECURE yes
}

# TODO manage these flags
# set _M33_SECURE yes/no/na
# _A35_0_SECURE yes/no
# Needed for EL3 Launcher {start/end addresses of memory for A35 0 code}
#    single A35: [0x20006000:0x2003FFFF]
#    dual A35 : A35_0 [0x20006000:0x20025FFF] , A35_1 [0x20026000:0x2003FFFF]
# _HSI_FREQ [32000000] (used to patch EL3_Launcher to allow it to set STGEN to correct frequency)

source [find target/stm32mp25x_misc.cfg]

swj_newdap $_CHIPNAME tap -expected-id $_CPUTAPID -irlen 4 -ircapture 0x01 -irmask 0x0f
if { [using_jtag] } {
    jtag newtap $_CHIPNAME.clc tap -expected-id $_CLCTAPID -irlen 5
}

dap create $_CHIPNAME.dap -chain-position $_CHIPNAME.tap

# define AXI & APB Memory Access Ports
target create $_CHIPNAME.apb mem_ap -dap $_CHIPNAME.dap -ap-num 0
target create $_CHIPNAME.axi mem_ap -dap $_CHIPNAME.dap -ap-num 4

# I prefer to have this removed
set _REG_ACCESS_TARGET $_CHIPNAME.axi

# FIXME
# P.Chelius: I don't know why ...
#   First target to be created is the one with which the reset is done
#   Then M0+ and M33 must not be the last ones if A35 is to be debugged
#   Otherwise M33 or M0PLUS may fail
# => for CubeIDE, we are currently creating only the debugged core, so maybe we don't care
# => @Antonio ?

# define the first Cortex-A35 #####################################################################
# TODO these 2 flags could be merged (for CubeIDE context)
set _A35_0_CORE_USED no
set _A35_0_CORE_START no
set _A35_0_MEM_START 0x20006000
set _A35_0_MEM_END 0x20025FFF
if { ($_AP_NUM == $_AP_NUM_A35) && ($_CORE_ID == 0) } {
    set _A35_0_CORE_USED yes
    set _A35_0_CORE_START yes
    cti create $_CHIPNAME.cti0 -dap $_CHIPNAME.dap -ap-num 0 -baseaddr 0x80220000
    target create $_CHIPNAME.a35_0 aarch64 -dap $_CHIPNAME.dap -ap-num $_AP_NUM_A35 \
        -dbgbase 0x80210000 -cti $_CHIPNAME.cti0 \
        -gdb-port $_GDB_PORT
    $_CHIPNAME.a35_0 configure -event examine-end { $::_CHIPNAME.a35_0 arp_poll     }
    $_CHIPNAME.a35_0 configure -event halted      { ca35_halted_handler       A35_0 }
    $_CHIPNAME.a35_0 configure -event reset-start { reset_start_handler       A35_0 }
    $_CHIPNAME.a35_0 configure -event reset-end   { reset_end_handler         A35_0 }
    $_CHIPNAME.a35_0 configure -event gdb-attach  { $::_CHIPNAME.a35_0 arp_examine; halt 1000 }
}

# define the second Cortex-A35 ####################################################################
# TODO these 2 flags could be merged (for CubeIDE context)
set _A35_1_CORE_USED no
set _A35_1_CORE_START no
set _A35_1_MEM_START 0x20026000
set _A35_1_MEM_END 0x2003FFFF
if { ($_AP_NUM == $_AP_NUM_A35) && ($_CORE_ID == 1) } {
    set _A35_1_CORE_USED yes
    set _A35_1_CORE_START yes
    cti create $_CHIPNAME.cti1 -dap $_CHIPNAME.dap -ap-num 0 -baseaddr 0x80320000
    target create $_CHIPNAME.a35_1 aarch64 -dap $_CHIPNAME.dap -ap-num  $_AP_NUM_A35 \
        -dbgbase 0x80310000 -cti $_CHIPNAME.cti1 \
        -gdb-port $_GDB_PORT
    $_CHIPNAME.a35_1 configure -event examine-end { $::_CHIPNAME.a35_1 arp_poll     }
    $_CHIPNAME.a35_1 configure -event halted      { ca35_halted_handler       A35_1 }
    $_CHIPNAME.a35_1 configure -event reset-start { reset_start_handler       A35_1 }
    $_CHIPNAME.a35_1 configure -event reset-end   { reset_end_handler         A35_1 }
    $_CHIPNAME.a35_1 configure -event gdb-attach  { $::_CHIPNAME.a35_1 arp_examine; halt 1000 }
}

# define the Cortex-M33 ###########################################################################
# TODO these 2 flags could be merged (for CubeIDE context)
set _M33_CORE_USED no
set _M33_CORE_START no
if { $_AP_NUM == $_AP_NUM_M33 } {
    set _M33_CORE_USED yes
    set _M33_CORE_START yes
    target create $_CHIPNAME.m33 cortex_m -dap $_CHIPNAME.dap -ap-num $_AP_NUM_M33 \
        -gdb-port $_GDB_PORT -gdb-max-connections 2
    $_CHIPNAME.m33 configure -event reset-start   { reset_start_handler       M33 }
    $_CHIPNAME.m33 configure -event reset-end     { reset_end_handler         M33 }
    $_CHIPNAME.m33 configure -event examine-end   { clear_icsr_m33                }
}

# define the Cortex-M0+ ###########################################################################
# TODO these 2 flags could be merged (for CubeIDE context)
set _M0PLUS_CORE_USED no
set _M0PLUS_CORE_START no
if { $_AP_NUM == $_AP_NUM_M0P } {
    set _M0PLUS_CORE_USED yes
    set _M0PLUS_CORE_START yes
    target create $_CHIPNAME.m0p cortex_m -dap $_CHIPNAME.dap -ap-num $_AP_NUM_M0P \
        -gdb-port $_GDB_PORT -gdb-max-connections 2
    $_CHIPNAME.m0p configure -event reset-start   { reset_start_handler       M0PLUS }
    $_CHIPNAME.m0p configure -event reset-end     { reset_end_handler         M0PLUS }
    $_CHIPNAME.m0p configure -event examine-start { start_m0plus                     }
    $_CHIPNAME.m0p configure -event examine-end   { clear_icsr_m0plus                }
}

# define event handlers ###########################################################################
proc ca35_halted_handler {core_name} {
   global _A35_MODE_SWITCH
   if { $_A35_MODE_SWITCH } { switch_ca35_to_aarch32_thumb $core_name }
}

set _EL3_LAUNCHER_LOADED no
proc reset_start_handler {core_name} {
   global _EL3_LAUNCHER_LOADED
   set _EL3_LAUNCHER_LOADED no
}

proc reset_end_handler {core_name} {
   global _CHIPNAME
   global _M33_TDCID_FLAG

   if { $_M33_TDCID_FLAG } {
      echo "....................................................................."
      echo "...        M33 TDCID DEV BOOT SoC minimal configuration          ...."
      echo "... Load Secure FW in RETRAM and nonsecure FW in SRAM and LPSRAM ...."
      echo "......................................................................"

      echo "... Configuring DAP in TZ mode (secure access with \"NS\"=0) ..."
      $_CHIPNAME.dap apsel 4
      $_CHIPNAME.dap apcsw 0x10006000

      echo "... Setting TD-CID to M33-CID ..."
      WriteReg 0x42080c00 0x00008720

      echo "!!! TMP PATCH BOOTROM ISSUE in DEV BOOT (120635) -  RISAB5(RETRAM) set all 8 blocks of Page 1 to Secure access instead 3 blocks only !!!"
      WriteReg 0x42130100  0xFF

      echo "!!! RISAB4/5(SRAM1/2) in secure access to allow GDB (via M33 in secure state) to write FW in SYSRAM !!!"
      # NOTE ! This is needed for Examples which runs on M33 SE Non-Secure in MCUSRAM which M33 SE Secure code runs from RETRAM
      #   M33 SE Secure code for Examples is in Projects/STM32MP257F-VALID3/Applications/SPE_NSCubeProjects/STM32CubeIDE/CM33/Secure project
      #   M33 SE Non-Secure applications and examples are in various projects in Projects/STM32MP257F-VALID3
      #echo "... Switching ON MCUSRAM1 ..."
      WriteReg 0x442004F8 0x6
      #echo "... Switching ON MCUSRAM2 ..."
      WriteReg 0x442004FC 0x6
      set_access_to_memory SRAM1 secure_access none none
      set_access_to_memory SRAM2 secure_access none none
   }
}

# end of event handlers ###########################################################################


# TODO verify what's best
# reset_config srst_only connect_assert_srst (reduced scripts)
reset_config srst_gates_jtag srst_pulls_trst

adapter speed 20000
adapter srst pulse_width 200
# wait 2 seconds for bootrom
adapter srst delay 1000

# set CSW for AXI
$_CHIPNAME.dap apsel 4
$_CHIPNAME.dap apcsw 0x12800000
