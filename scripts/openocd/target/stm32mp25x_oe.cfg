# SPDX-License-Identifier: GPL-2.0-or-later

# STMicroelectronics STM32MP25x
# STM32MP25x devices support both JTAG and SWD transports.

# HLA does not support multi-cores nor custom CSW nor AP other than 0
if { [using_hla] } {
	echo "ERROR: HLA transport cannot work with this target."
	shutdown
}

source [find target/swj-dp.tcl]
source [find mem_helper.tcl]

if { [info exists CHIPNAME] } {
	set _CHIPNAME $CHIPNAME
} else {
	set _CHIPNAME stm32mp25x
}

set _ENDIAN little

# jtag scan chain
if { [info exists CPUTAPID] } {
	set _CPUTAPID $CPUTAPID
} else {
	if { [using_jtag] } {
		set _CPUTAPID 0x6ba00477
	} {
		set _CPUTAPID 0x6ba02477
	}
}

# Chip Level TAP Controller, only in jtag mode
if { [info exists CLCTAPID] } {
	set _CLCTAPID $CLCTAPID
} else {
	set _CLCTAPID 0x16505041
}

swj_newdap $_CHIPNAME tap -expected-id $_CPUTAPID -irlen 4 -ircapture 0x01 -irmask 0x0f
if { [using_jtag] } {
	swj_newdap $_CHIPNAME.clc tap -expected-id $_CLCTAPID -irlen 5
}

dap create $_CHIPNAME.dap -chain-position $_CHIPNAME.tap

# define AXI & APB Memory Access Ports
# NOTE: do not change the order of target create
target create $_CHIPNAME.ap0 mem_ap -dap $_CHIPNAME.dap -ap-num 0
target create $_CHIPNAME.axi mem_ap -dap $_CHIPNAME.dap -ap-num 4
target create $_CHIPNAME.ap2 mem_ap -dap $_CHIPNAME.dap -ap-num 2
target create $_CHIPNAME.ap8 mem_ap -dap $_CHIPNAME.dap -ap-num 8

# define the first Cortex-A35
cti create $_CHIPNAME.cti.a35_0 -dap $_CHIPNAME.dap -ap-num 0 -baseaddr 0x80220000
target create $_CHIPNAME.a35_0 aarch64 -dap $_CHIPNAME.dap -dbgbase 0x80210000 -ap-num 0 -cti $_CHIPNAME.cti.a35_0

# define the second Cortex-A35
cti create $_CHIPNAME.cti.a35_1 -dap $_CHIPNAME.dap -ap-num 0 -baseaddr 0x80320000
target create $_CHIPNAME.a35_1 aarch64 -dap $_CHIPNAME.dap -dbgbase 0x80310000 -ap-num 0 -cti $_CHIPNAME.cti.a35_1

# define the Cortex-M33
target create $_CHIPNAME.m33 cortex_m -dap $_CHIPNAME.dap -ap-num 8 -defer-examine
cti create $_CHIPNAME.cti.m33 -dap $_CHIPNAME.dap -ap-num 8 -baseaddr 0xe0042000

# define the Cortex-M0+
target create $_CHIPNAME.m0p cortex_m -dap $_CHIPNAME.dap -ap-num 2 -defer-examine
cti create $_CHIPNAME.cti.m0p -dap $_CHIPNAME.dap -ap-num 2 -baseaddr 0xf0000000

# define the system CTIs
cti create $_CHIPNAME.cti.sys0 -dap $_CHIPNAME.dap -ap-num 0 -baseaddr 0x80090000
cti create $_CHIPNAME.cti.sys1 -dap $_CHIPNAME.dap -ap-num 0 -baseaddr 0x800a0000

targets $_CHIPNAME.a35_0

target smp $_CHIPNAME.a35_0 $_CHIPNAME.a35_1

reset_config srst_gates_jtag srst_pulls_trst

adapter speed 5000
adapter srst pulse_width 200
# wait 1 seconds for bootrom
adapter srst delay 1000

# set CSW for AXI
$_CHIPNAME.dap apsel 4
$_CHIPNAME.dap apcsw 0x12800000

# mmw with target selection
proc target_mmw {target reg setbits clearbits} {
	set val [eval $target read_memory $reg 32 1]
	set val [expr {($val & ~$clearbits) | $setbits}]
	eval $target mww $reg $val
}

proc dbgmcu_enable_debug {} {
	# set debug enable bits in DBGMCU_CR to get ap2/cm0+ and ap8/cm33 visible
	# set DBG_SWD_SEL_N bit in DBGMCU_CR to get ap2/cm0+ on main debug interface
	$::_CHIPNAME.ap0 mww 0x80010004 0x17
}

proc dbgmcu_freeze_watchdogs {} {
	# Freeze watchdogs on CPU halt
	$::_CHIPNAME.axi mww 0x4a010008 0x00000001
	$::_CHIPNAME.axi mww 0x4a01003c 0x00000026
	$::_CHIPNAME.axi mww 0x4a010040 0x00000038
	$::_CHIPNAME.axi mww 0x4a010044 0x00000400
	$::_CHIPNAME.axi mww 0x4a010048 0x00000400
	$::_CHIPNAME.axi mww 0x4a01004c 0x00000600
}

proc enable_ap2_debug {} {
	# set bits C3LPEN and C3EN in RCC_C3CFGR to enable AP2 and CM0+ clock
	target_mmw $::_CHIPNAME.axi 0x54200490 6 0
}

proc toggle_a35_0_dbg_claim0 {} {
	# set few bits in CPU0 DBG_CLAIM to verify write permission
	# FSBL wrapper will clear CPU0 DBG_CLAIM[0]
	# toggle CPU0 DBG_CLAIM[0]
	$::_CHIPNAME.ap0 mww 0x80210fa0 0x0b
	set claim [$::_CHIPNAME.ap0 read_memory 0x80210fa4 32 1]
	if {[expr {$claim & 0xfe}] != 0x0a} {
		error "ERROR: cannot write in DBG_CLAIM. Missing FSBL wrapper?"
	}
	if {[expr {$claim & 1}]} {
		echo "WARNING: FSBL wrapper not detected. Board in dev boot mode?"
	}
	$::_CHIPNAME.ap0 mww 0x80210fa4 0x0b
}

$_CHIPNAME.m33   configure -event reset-assert        { }
$_CHIPNAME.ap0   configure -event reset-deassert-pre  {adapter deassert srst deassert trst;catch {dap init};catch {$::_CHIPNAME.dap apid 0}}
$_CHIPNAME.ap2   configure -event reset-deassert-pre  {dbgmcu_enable_debug;dbgmcu_freeze_watchdogs;enable_ap2_debug}
$_CHIPNAME.a35_0 configure -event reset-deassert-pre  {$::_CHIPNAME.a35_0 arp_examine}
$_CHIPNAME.a35_1 configure -event reset-deassert-pre  {$::_CHIPNAME.a35_1 arp_examine}
$_CHIPNAME.a35_0 configure -event reset-deassert-post {toggle_a35_0_dbg_claim0;if {$halt} {$::_CHIPNAME.a35_0 arp_halt}}
$_CHIPNAME.m33   configure -event reset-deassert-post {$::_CHIPNAME.m33 arp_examine;$::_CHIPNAME.m33 arp_poll;$::_CHIPNAME.m33 arp_poll;if {$halt} {catch {$::_CHIPNAME.m33 arp_halt}}}
$_CHIPNAME.m0p   configure -event reset-deassert-post {$::_CHIPNAME.m0p arp_examine}
$_CHIPNAME.ap0   configure -event examine-start       {dap init}
$_CHIPNAME.ap2   configure -event examine-start       {dbgmcu_freeze_watchdogs;enable_ap2_debug;$::_CHIPNAME.m0p arp_examine}
$_CHIPNAME.ap0   configure -event examine-end         {dbgmcu_enable_debug;$::_CHIPNAME.m33 arp_examine}
